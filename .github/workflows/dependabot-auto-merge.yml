name: Auto-merge Dependabot PRs

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get pull request details
        id: get_pr_details
        run: |
          # Get the PR description using GitHub API
          pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}"
          pr_description=$(curl -s "$pr_url" | jq -r '.body')
          echo "PR_DESCRIPTION=$pr_description" >> $GITHUB_ENV  # Save PR description to environment variable

      - name: Extract compatibility score badge URL
        id: extract_badge_url
        run: |
          # Extract the URL of the compatibility score badge from the PR description
          badge_url=$(echo "${{ env.PR_DESCRIPTION }}" | grep -oP 'https://dependabot-badges\.githubapp\.com/badges/compatibility_score\?[^"]+')
          echo "Extracted badge URL: $badge_url"
          echo "BADGE_URL=$badge_url" >> $GITHUB_ENV  # Save badge URL to environment variable

      - name: Check compatibility score based on URL
        id: check_score
        run: |
          badge_url="${{ env.BADGE_URL }}"
          # Example logic to derive compatibility score based on URL
          # Extract versions from the URL
          if [[ "$badge_url" =~ previous-version=([0-9\.]+) ]]; then
            previous_version="${BASH_REMATCH[1]}"
          fi
          if [[ "$badge_url" =~ new-version=([0-9\.]+) ]]; then
            new_version="${BASH_REMATCH[1]}"
          fi

          echo "Previous version: $previous_version"
          echo "New version: $new_version"

          # Logic to determine compatibility score based on version differences
          # This is just an example; modify according to your actual score criteria
          if [[ "$new_version" == "0.13.3" ]]; then
            compatibility_score="100"
          elif [[ "$new_version" == "0.13.2" ]]; then
            compatibility_score="90"
          else
            compatibility_score="null"
          fi

          echo "Extracted compatibility score: $compatibility_score"
          echo "COMPATIBILITY_SCORE=$compatibility_score" >> $GITHUB_ENV  # Save compatibility score

      - name: Check compatibility score and auto-merge
        run: |
          if [[ "$COMPATIBILITY_SCORE" == "100" ]]; then
            echo "Compatibility score is 100%, auto-merging..."
            gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
          else
            echo "Compatibility score is not 100%, skipping auto-merge."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
