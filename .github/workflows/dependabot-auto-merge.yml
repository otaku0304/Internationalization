name: Auto-merge Dependabot PRs

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check for existing open PRs
        id: check_open_prs
        run: |
          pr_count=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&base=dev" | jq '. | length')
          echo "Open PR count targeting dev branch: $pr_count"
          echo "pr_count=$pr_count" >> "$GITHUB_OUTPUT"

      - name: Exit if no open PRs
        if: steps.check_open_prs.outputs.pr_count == '0'
        run: |
          echo "No open PRs targeting dev branch. Exiting workflow."
          exit 0

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get pull request details
        id: get_pr_details
        run: |
          pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}"
          pr_description=$(curl -s "$pr_url" | jq -r '.body')
          echo "Pull request description: $pr_description"
          echo "PR_DESCRIPTION=$pr_description" >> $GITHUB_ENV

      - name: Extract compatibility score URL from PR description
        id: extract_url
        run: |
          # Extract the URL from the PR description
          compatibility_score_url=$(echo "${{ env.PR_DESCRIPTION }}" | grep -oP '(?<=\()\S+(?=\))')
          echo "Extracted compatibility score URL: $compatibility_score_url"
          echo "COMPATIBILITY_SCORE_URL=$compatibility_score_url" >> $GITHUB_ENV

      - name: Make GET request to extract compatibility score
        id: fetch_score
        run: |
          compatibility_score_url="${{ env.COMPATIBILITY_SCORE_URL }}"
          
          # Make a GET request to fetch the compatibility score
          response=$(curl -s "$compatibility_score_url")
          echo "Response: $response"

          # Extract the compatibility score from the response
          score=$(echo "$response" | jq -r '.score // "null"')
          echo "Extracted compatibility score: $score"
          echo "COMPATIBILITY_SCORE=$score" >> $GITHUB_ENV

      - name: Check compatibility score and auto-merge
        run: |
          if [[ "$COMPATIBILITY_SCORE" == "100" ]]; then
            echo "Compatibility score is 100%, auto-merging..."
            gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
          else
            echo "Compatibility score is not 100%, skipping auto-merge."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
