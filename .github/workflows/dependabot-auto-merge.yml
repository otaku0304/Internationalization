name: Auto-merge Dependabot PRs

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check for existing open PRs
        id: check_open_prs
        run: |
          pr_count=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&base=dev" | jq '. | length')
          echo "Open PR count targeting dev branch: $pr_count"
          echo "pr_count=$pr_count" >> "$GITHUB_OUTPUT"

      - name: Exit if no open PRs
        if: steps.check_open_prs.outputs.pr_count == '0'
        run: |
          echo "No open PRs targeting dev branch. Exiting workflow."
          exit 0

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get pull request details
        id: get_pr_details
        run: |
          pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}"
          pr_description=$(curl -s "$pr_url" | jq -r '.body')
          echo "Pull request description: $pr_description"
          echo "PR_DESCRIPTION=$pr_description" >> $GITHUB_ENV

      - name: Extract compatibility score from PR description
        id: extract_score
        run: |
          pr_description="${{ env.PR_DESCRIPTION }}"
          compatibility_score=$(echo "$pr_description" | sed 's/<[^>]*>//g' | grep -oP 'Dependabot compatibility score\s*([\d.]+)' | awk '{print $NF}' || echo "null")
          echo "Extracted compatibility score: $compatibility_score"
          echo "COMPATIBILITY_SCORE=$compatibility_score" >> $GITHUB_ENV

      - name: Get existing Neon branch for this PR
        id: get-existing-branch
        run: |
          branch_id="$(jq --raw-output '.branches[] | select(.name | startswith("PR #${{ github.event.pull_request.number }} ")) | .id' list-neon-branches-response.json)"
          echo "Branch ID: $branch_id"
          echo "branch_id=$branch_id" >> "$GITHUB_OUTPUT"
          
          # Optionally handle if the branch_id is not found
          if [ -z "$branch_id" ]; then
            echo "No existing branch found for this PR."
            exit 1
          fi

      - name: Check compatibility score and auto-merge
        run: |
          if [[ "$COMPATIBILITY_SCORE" == "100" ]]; then
            echo "Compatibility score is 100%, auto-merging..."
            gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
          else
            echo "Compatibility score is not 100%, skipping auto-merge."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
