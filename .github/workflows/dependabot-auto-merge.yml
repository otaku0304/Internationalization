name: Auto-merge Dependabot PRs

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check for existing open PRs
        id: check_open_prs
        run: |
          pr_count=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&base=dev" | jq '. | length')
          echo "Open PR count targeting dev branch: $pr_count"
          echo "pr_count=$pr_count" >> "$GITHUB_OUTPUT"

      - name: Exit if no open PRs
        if: steps.check_open_prs.outputs.pr_count == '0'
        run: |
          echo "No open PRs targeting dev branch. Exiting workflow."
          exit 0

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get pull request details
        id: get_pr_details
        run: |
          pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}"
          pr_title=$(curl -s "$pr_url" | jq -r '.title')
          echo "Pull request title: $pr_title"
          echo "PR_TITLE=$pr_title" >> $GITHUB_ENV

      - name: Extract parameters from PR title
        id: extract_params
        run: |
          # Assuming the title format includes the necessary details
          # For example: "Update karma to version 6.4.4 (previous: 6.4.2, package-manager: npm_and_yarn)"
          
          echo "$PR_TITLE" | grep -oP '(?<=package-manager: )\S+' > package_manager.txt
          package_manager=$(< package_manager.txt)
          previous_version=$(echo "$PR_TITLE" | grep -oP '(?<=previous: )\d+\.\d+\.\d+')
          new_version=$(echo "$PR_TITLE" | grep -oP '(?<=version )\d+\.\d+\.\d+')

          echo "Extracted parameters:"
          echo "Package Manager: $package_manager"
          echo "Previous Version: $previous_version"
          echo "New Version: $new_version"

          # Set extracted values as output variables
          echo "PACKAGE_MANAGER=$package_manager" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION=$previous_version" >> $GITHUB_ENV
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Make GET request to fetch compatibility score
        id: fetch_score
        run: |
          # Construct the URL for the compatibility score request
          compatibility_score_url="https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=karma&package-manager=${{ env.PACKAGE_MANAGER }}&previous-version=${{ env.PREVIOUS_VERSION }}&new-version=${{ env.NEW_VERSION }}"

          # Make a GET request to fetch the compatibility score
          response=$(curl -s "$compatibility_score_url")
          echo "Response: $response"

          # Extract the compatibility score from the response
          score=$(echo "$response" | jq -r '.score // "null"')
          echo "Extracted compatibility score: $score"
          echo "COMPATIBILITY_SCORE=$score" >> $GITHUB_ENV

      - name: Check compatibility score and auto-merge
        run: |
          if [[ "$COMPATIBILITY_SCORE" == "100" ]]; then
            echo "Compatibility score is 100%, auto-merging..."
            gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
          else
            echo "Compatibility score is not 100%, skipping auto-merge."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
