name: Auto-merge Dependabot PRs

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check for existing open PRs
        id: check_open_prs
        run: |
          pr_count=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&base=dev" | jq '. | length')
          echo "Open PR count targeting dev branch: $pr_count"
          echo "pr_count=$pr_count" >> "$GITHUB_OUTPUT"

      - name: Exit if no open PRs
        if: steps.check_open_prs.outputs.pr_count == '0'
        run: |
          echo "No open PRs targeting dev branch. Exiting workflow."
          exit 0

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get pull request details
        id: get_pr_details
        run: |
          pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}"
          pr_title=$(curl -s "$pr_url" | jq -r '.title')
          echo "Pull request title: $pr_title"
          echo "PR_TITLE=$pr_title" >> $GITHUB_ENV

      - name: Extract package manager, previous version, and new version from PR title
        id: extract_details
        run: |
          PR_TITLE="${{ env.PR_TITLE }}"
          package_manager=$(echo "$PR_TITLE" | grep -oP '(?<=package-manager: )\S+' || echo "npm_and_yarn")
          previous_version=$(echo "$PR_TITLE" | grep -oP '\d+\.\d+\.\d+' | head -n 1)
          new_version=$(echo "$PR_TITLE" | grep -oP '\d+\.\d+\.\d+' | tail -n 1)
          echo "Extracted parameters:"
          echo "Package Manager: $package_manager"
          echo "Previous Version: $previous_version"
          echo "New Version: $new_version"
          echo "PACKAGE_MANAGER=$package_manager" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION=$previous_version" >> $GITHUB_ENV
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Generate compatibility score URL and request the score
        id: request_compatibility_score
        run: |
          compatibility_url="https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=${{ github.event.pull_request.head.ref }}&package-manager=${{ env.PACKAGE_MANAGER }}&previous-version=${{ env.PREVIOUS_VERSION }}&new-version=${{ env.NEW_VERSION }}"
          echo "Generated URL: $compatibility_url"
          compatibility_score_svg=$(curl -s "$compatibility_url")
          
          # Extract the compatibility score from the SVG response
          compatibility_score=$(echo "$compatibility_score_svg" | grep -oP '(?<=<title>compatibility: )\d+')
          echo "Compatibility score: $compatibility_score"
          
          # Set the extracted score as an environment variable
          echo "COMPATIBILITY_SCORE=$compatibility_score" >> $GITHUB_ENV

      - name: Check compatibility score and auto-merge
        run: |
          if [[ "$COMPATIBILITY_SCORE" -eq "100" ]]; then
            echo "Compatibility score is 100%, auto-merging..."
            gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
          else
            echo "Compatibility score is not 100%, skipping auto-merge."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
